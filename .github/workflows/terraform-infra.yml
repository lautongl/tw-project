
name: 🏗️ Terraform Infrastructure

on:
  # Trigger manual via GitHub UI
  workflow_dispatch:
    inputs:
      bucket_name:
        description: 'S3 Bucket Name'
        required: true
        type: string
        default: 'platform-test-bucket'
      environment:
        description: 'Environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - prod
        default: 'development'
      action:
        description: 'Terraform Action'
        required: true
        type: choice
        options:
          - apply
          - destroy
        default: 'apply'
  
  # Trigger via API (para depois integrar com sua API Java)
  repository_dispatch:
    types: [create-s3-resource]

env:
  TF_VERSION: '1.5.7'
  AWS_DEFAULT_REGION: 'us-east-1'

jobs:
  terraform-validate:
    name: 🔍 Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: ✅ Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check
    
    - name: 🔍 Terraform Validate
      run: |
        cd terraform
        terraform init -backend=false
        terraform validate

  terraform-plan:
    name: 📋 Plan Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: ⚙️ Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: 📋 Terraform Plan
      id: plan
      run: |
        cd terraform
        terraform init
        
        # Get bucket name from input or event payload
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          BUCKET_NAME="${{ github.event.inputs.bucket_name }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
        else
          BUCKET_NAME="${{ github.event.client_payload.bucket_name }}"
          ENVIRONMENT="${{ github.event.client_payload.environment || 'development' }}"
        fi
        
        echo "Planning for bucket: $BUCKET_NAME"
        
        terraform plan \
          -var="bucket_name=$BUCKET_NAME" \
          -var="environment=$ENVIRONMENT" \
          -out=tfplan
        
        # Save variables for next job
        echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
        echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
    
    - name: 📤 Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan
        retention-days: 1

  terraform-apply:
    name: 🚀 Apply Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: 
      name: ${{ github.event.inputs.environment || github.event.client_payload.environment || 'development' }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: ⚙️ Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: 📥 Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: terraform/
    
    - name: 🚀 Terraform Apply or Destroy
      run: |
        cd terraform
        terraform init
        
        # Get values from inputs or payload
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          BUCKET_NAME="${{ github.event.inputs.bucket_name }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          ACTION="${{ github.event.inputs.action }}"
        else
          BUCKET_NAME="${{ github.event.client_payload.bucket_name }}"
          ENVIRONMENT="${{ github.event.client_payload.environment || 'development' }}"
          ACTION="${{ github.event.client_payload.action || 'apply' }}"
        fi
        
        if [ "$ACTION" = "destroy" ]; then
          echo "🗑️ Destroying infrastructure..."
          terraform destroy -auto-approve \
            -var="bucket_name=$BUCKET_NAME" \
            -var="environment=$ENVIRONMENT"
        else
          echo "🚀 Applying infrastructure..."
          terraform apply -auto-approve tfplan
          
          echo "✅ S3 bucket '$BUCKET_NAME' created successfully!"
          
          # Generate outputs
          terraform output -json > ../terraform-outputs.json
        fi
    
    - name: 📤 Upload Terraform Outputs
      if: github.event.inputs.action != 'destroy'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: terraform-outputs.json
        retention-days: 7
    
    - name: 📝 Comment on Commit (se foi disparado por API)
      if: github.event_name == 'repository_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          const bucket_name = '${{ github.event.client_payload.bucket_name }}';
          const environment = '${{ github.event.client_payload.environment || "development" }}';
          
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: `🪣 S3 bucket \`${bucket_name}\` created successfully in \`${environment}\` environment via Platform API!`
          })
